name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev ffmpeg

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        flake8 src/ main.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ main.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: black --check src/ main.py

    - name: Import sort check
      run: isort --check-only src/ main.py

    - name: Type check with mypy
      run: mypy src/ || true  # Allow mypy to fail for now

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml || true  # Allow tests to fail for now

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: whisper-transcriber-linux
            asset_name: whisper-transcriber-linux-amd64
          - os: windows-latest
            artifact_name: whisper-transcriber-windows
            asset_name: whisper-transcriber-windows-amd64.exe
          - os: macos-latest
            artifact_name: whisper-transcriber-macos
            asset_name: whisper-transcriber-macos-amd64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements*.txt') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev ffmpeg

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio ffmpeg create-dmg

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows dependencies are typically handled by pip packages
        echo "Installing Windows dependencies..."

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        pyinstaller whisper-transcriber.spec --clean --noconfirm

    - name: Create DMG (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        create-dmg \
          --volname "Whisper Transcriber" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "Whisper Transcriber.app" 200 190 \
          --hide-extension "Whisper Transcriber.app" \
          --app-drop-link 600 185 \
          "dist/Whisper-Transcriber.dmg" \
          "dist/" || true

    - name: Package artifacts
      shell: bash
      run: |
        cd dist
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a -tzip ../${{ matrix.artifact_name }}.zip whisper-transcriber/
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          tar -czf ../${{ matrix.artifact_name }}.tar.gz whisper-transcriber/
          if [ -f "Whisper-Transcriber.dmg" ]; then
            cp "Whisper-Transcriber.dmg" "../${{ matrix.artifact_name }}.dmg"
          fi
        else
          tar -czf ../${{ matrix.artifact_name }}.tar.gz whisper-transcriber/
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.*
        retention-days: 30


  docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Build documentation
      run: |
        sphinx-build -b html docs/ docs/_build/html/
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html/

  release:
    name: Create Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Changes in this Release

          ### Features
          - Real-time audio transcription with Whisper AI
          - Multi-language support with translation
          - Desktop GUI, Web interface, and Console modes
          - Voice Activity Detection (VAD)
          - Multiple audio device support

          ### Downloads
          - **Windows**: whisper-transcriber-windows-amd64.exe
          - **macOS**: whisper-transcriber-macos-amd64.tar.gz or .dmg
          - **Linux**: whisper-transcriber-linux-amd64.tar.gz


    - name: Upload Release Assets
      shell: bash
      run: |
        for dir in artifacts/*/; do
          for file in "$dir"*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload ${{ github.ref }} "$file" --clobber
            fi
          done
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
